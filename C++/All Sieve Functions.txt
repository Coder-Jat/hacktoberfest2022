bool Not_prime[N]={};
bool IsPrime(int n)
{
    if (n==2)
        return true;
    if (n<2||n%2==0)
        return false;
    for (int i=3; i*i<=n; i+=2)
        if (n%i==0)
            return false;
    return true;
}
vector<ll>divisors;
void Divs(ll n)
{
    for (ll i=1; i*i<=n; ++i)
    {
        if (n%i==0)
        {
            divisors.push_back(i);
            if (!(i*i==n))
                divisors.push_back(n/i);
        }
    }
}
ll NoofDivisors(ll n)
{
    ll cnt=1;
    for (ll i=2; i*i<=n; ++i)
    {
        int power=0;
        while (n%i==0)
        {
            n/=i;
            ++power;
        }
        cnt*=(power+1);
    }
    if (n>1)
        cnt*=2;
    return cnt;
}
int number_of_divisors[N]= {};
void Sieve_NoofDivisors(int n)
{
    number_of_divisors[0]=number_of_divisors[1]=1;
    for (int i=2; i*i<=n; ++i)
        if (!number_of_divisors[i])
            for (int j=i; j<n; j+=i)
            {
                int e=0;
                int q=j;
                while (q%i==0)
                {
                    ++e;
                    q/=i;
                }
                if(number_of_divisors[j])
                    number_of_divisors[j]*=(e+1);
                else
                    number_of_divisors[j]=(e+1);
            }
}
vector<int> primes;
void prime_fact(ll n)
{
    bool ok=false;
    for(ll i = 2 ; i * i <= n ; i++)
    {
        while(n % i == 0)
        {
            ok=1;
            n /= i;
        }
        if(ok)
        primes.push_back(i);
        ok=0;
    }
    if(n > 1)
        primes.push_back(n);
}
void Sieve()
{
    Not_prime[0]=Not_prime[1]=true;
    for (ll i=2; i*i<=N; ++i)
        if (!Not_prime[i])
            for (ll j=i*i; j<=N; j+=i)
                Not_prime[j]=true;
}
int cntPrime[N];
void seive()
{
    for(ll i=2; i<N; i++)
    {
        if(cntPrime[i])
            continue;
        for(ll j=i; j<N; j+=i)
        {
            cntPrime[j]++;
        }
    }
}